import {parsethecode} from '../src/js/parser';
import assert from 'assert';
import {parseCode} from '../src/js/code-analyzer';
function tostring(arrnew) {
    var s='';
    // console.log('dd');
    for (let i=0;i<arrnew.length;i++){
        //console.log('dd');
        if (i==0){
            s=s+'[';
        }
        s=s+'{line:'+arrnew[i].get('line')+',';
        s=s+'type:'+arrnew[i].get('type')+',';
        s=s+'name:'+arrnew[i].get('name')+',';
        s=s+'condition:'+arrnew[i].get('condition')+',';
        s=s+'value:'+arrnew[i].get('value')+'}';
        if (i!=arrnew.length-1){
            s=s+',';
        }
        if (i==arrnew.length-1){
            s=s+']';
        }
    }
    return s;
}
describe('The javascript parser', () => {
    it('we want to test this statement : let x=5;', () => {  assert.equal( tostring(parsethecode(parseCode('let x=5;'),'let x=5;')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:variable Declaration,name:x,condition:,value:5}]'); });
    it('we want to test this statement : fun;', () => {  assert.equal( tostring(parsethecode(parseCode('function binarySearch(X, V, n){ let low, high, mid; low = 0; high = n - 1; while (low <= high) { mid = (low + high)/2; if (X < V[mid]) high = mid - 1; else if (X > V[mid]) low = mid + 1; else return mid; } return -1; }'),'function binarySearch(X, V, n){ let low, high, mid; low = 0; high = n - 1; while (low <= high) { mid = (low + high)/2; if (X < V[mid]) high = mid - 1; else if (X > V[mid]) low = mid + 1; else return mid; } return -1; }')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:Function Declaration,name:binarySearch,condition:,value:},{line:1,type:variable Declaration,name:X,condition:,value:},{line:1,type:variable Declaration,name:V,condition:,value:},{line:1,type:variable Declaration,name:n,condition:,value:},{line:1,type:variable Declaration,name:low,condition:,value:},{line:1,type:variable Declaration,name:high,condition:,value:},{line:1,type:variable Declaration,name:mid,condition:,value:},{line:1,type:assignment expression,name:low,condition:,value:0},{line:1,type:assignment expression,name:high,condition:,value:n-1},{line:1,type:while statement,name:,condition:low<=high,value:},{line:1,type:assignment expression,name:mid,condition:,value:low+high/2},{line:1,type:if statement,name:,condition:X<V[mid],value:},{line:1,type:assignment expression,name:high,condition:,value:mid-1},{line:1,type:else if statement,name:,condition:X>V[mid],value:},{line:1,type:assignment expression,name:low,condition:,value:mid+1},{line:1,type:return statement,name:,condition:,value:mid},{line:1,type:return statement,name:,condition:,value:-1}]'); });
    it('we want to test this statement : if;', () => {  assert.equal( tostring(parsethecode(parseCode('if (X < V[5]){high = mid - 1;}'),'if (X < V[5]){high = mid - 1;}')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:if statement,name:,condition:X<V[5],value:},{line:1,type:assignment expression,name:high,condition:,value:mid-1}]'); });
    it('we want to test this statement : for;', () => {  assert.equal( tostring(parsethecode(parseCode('for(let i =0;i<15;i++){let x =5;x++}'),'for(let i =0;i<15;i++){let x =5;x++}')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:variable Declaration,name:i,condition:,value:0},{line:1,type:for statement,name:,condition:i<15,value:},{line:1,type:update expression,name:i,condition:,value:i++},{line:1,type:variable Declaration,name:x,condition:,value:5},{line:1,type:update expression,name:x,condition:,value:x++}]'); });
    it('we want to test this statement : if2', () => {  assert.equal( tostring(parsethecode(parseCode('if(x<10)x=15;else x=12;'),'if(x<10)x=15;else x=12;')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:if statement,name:,condition:x<10,value:},{line:1,type:assignment expression,name:x,condition:,value:15},{line:1,type:assignment expression,name:x,condition:,value:12}]'); });
    it('we want to test this statement : if3;', () => {  assert.equal( tostring(parsethecode(parseCode('function binarySearch(X, V, n){\n' + '    let low, high, mid;\n' + '    low = 0;\n' + '    high = n - 1;\n' + '    while (low <= high) {\n' + '        mid = (low + high)/2;\n' + '        if (X < V[mid])\n' + '            high = mid - 1;\n' + '        else if (X > V[mid])\n' + '            low = mid + 1;\n' + '        else\n' + '            return mid;\n' + '    }\n' + '    return -1;\n' + '}'),'function binarySearch(X, V, n){\n' + '    let low, high, mid;\n' + '    low = 0;\n' + '    high = n - 1;\n' + '    while (low <= high) {\n' + '        mid = (low + high)/2;\n' + '        if (X < V[mid])\n' + '            high = mid - 1;\n' + '        else if (X > V[mid])\n' + '            low = mid + 1;\n' + '        else\n' + '            return mid;\n' + '    }\n' + '    return -1;\n' + '}')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:Function Declaration,name:binarySearch,condition:,value:},{line:1,type:variable Declaration,name:X,condition:,value:},{line:1,type:variable Declaration,name:V,condition:,value:},{line:1,type:variable Declaration,name:n,condition:,value:},{line:2,type:variable Declaration,name:low,condition:,value:},{line:2,type:variable Declaration,name:high,condition:,value:},{line:2,type:variable Declaration,name:mid,condition:,value:},{line:3,type:assignment expression,name:low,condition:,value:0},{line:4,type:assignment expression,name:high,condition:,value:n-1},{line:5,type:while statement,name:,condition:low<=high,value:},{line:6,type:assignment expression,name:mid,condition:,value:low+high/2},{line:7,type:if statement,name:,condition:X<V[mid],value:},{line:8,type:assignment expression,name:high,condition:,value:mid-1},{line:9,type:else if statement,name:,condition:X>V[mid],value:},{line:10,type:assignment expression,name:low,condition:,value:mid+1},{line:12,type:return statement,name:,condition:,value:mid},{line:14,type:return statement,name:,condition:,value:-1}]'); });
    //it('we want to test this statement : if4;', () => {  assert.equal( tostring(parsethecode(parseCode('if (X < V[mid]){high = mid - 1;high =15;}else if (X > V[mid]){ low = mid + 1;h=25;}else{h=100;}'),'if (X < V[mid]){high = mid - 1;high =15;}else if (X > V[mid]){ low = mid + 1;h=25;}else{h=100;}')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:if statement,name:,condition:X<V[mid],value:},{line:1,type:assignment expression,name:high,condition:,value:mid-1},{line:1,type:assignment expression,name:high,condition:,value:15},{line:1,type:else if statement,name:,condition:X>V[mid],value:}]'); });
    it('we want to test this statement : let2;', () => {  assert.equal( tostring(parsethecode(parseCode('let x =5;\n' + 'let y=12;'),'let x =5;\n' + 'let y=12;')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:variable Declaration,name:x,condition:,value:5},{line:2,type:variable Declaration,name:y,condition:,value:12}]'); });
    it('we want to test this statement : if5;', () => {  assert.equal( tostring(parsethecode(parseCode('if(x>5){let y=12;let z=22;}else if(x>2){let h=12;let l=22;}else if(x>1){let t=12; let tt=22;}else{let m=12; let k=22;}'),'if(x>5){let y=12;let z=22;}else if(x>2){let h=12;let l=22;}else if(x>1){let t=12; let tt=22;}else{let m=12; let k=22;}')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:if statement,name:,condition:x>5,value:},{line:1,type:variable Declaration,name:y,condition:,value:12},{line:1,type:variable Declaration,name:z,condition:,value:22},{line:1,type:else if statement,name:,condition:x>2,value:},{line:1,type:variable Declaration,name:h,condition:,value:12},{line:1,type:variable Declaration,name:l,condition:,value:22},{line:1,type:else if statement,name:,condition:x>1,value:},{line:1,type:variable Declaration,name:t,condition:,value:12},{line:1,type:variable Declaration,name:tt,condition:,value:22}]'); });
   it('we want to test this statement : fun2;', () => {  assert.equal( tostring(parsethecode(parseCode('function binarySearch(X, V, n){\n' + '    let low, high, mid;\n' + '    low = 0;\n' + '    high = n - 1;\n' + '    while (low <= high) {\n' + '        mid = (low + high)/2;\n' + '        if (X < V[mid])\n' + '            high = mid - 1;\n' + '        else if (X > V[mid])\n' + '            low = mid + 1;\n' + '\n' + '    }\n' + '    return -1;\n' + '}'),'function binarySearch(X, V, n){\n' + '    let low, high, mid;\n' + '    low = 0;\n' + '    high = n - 1;\n' + '    while (low <= high) {\n' + '        mid = (low + high)/2;\n' + '        if (X < V[mid])\n' + '            high = mid - 1;\n' + '        else if (X > V[mid])\n' + '            low = mid + 1;\n' + '\n' + '    }\n' + '    return -1;\n' + '}')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:Function Declaration,name:binarySearch,condition:,value:},{line:1,type:variable Declaration,name:X,condition:,value:},{line:1,type:variable Declaration,name:V,condition:,value:},{line:1,type:variable Declaration,name:n,condition:,value:},{line:2,type:variable Declaration,name:low,condition:,value:},{line:2,type:variable Declaration,name:high,condition:,value:},{line:2,type:variable Declaration,name:mid,condition:,value:},{line:3,type:assignment expression,name:low,condition:,value:0},{line:4,type:assignment expression,name:high,condition:,value:n-1},{line:5,type:while statement,name:,condition:low<=high,value:},{line:6,type:assignment expression,name:mid,condition:,value:low+high/2},{line:7,type:if statement,name:,condition:X<V[mid],value:},{line:8,type:assignment expression,name:high,condition:,value:mid-1},{line:9,type:else if statement,name:,condition:X>V[mid],value:},{line:10,type:assignment expression,name:low,condition:,value:mid+1},{line:13,type:return statement,name:,condition:,value:-1}]'); });
    it('we want to test this statement : fun3', () => {  assert.equal( tostring(parsethecode(parseCode('function binarySearch(X, V, n){\n' + '    let low, high, mid;\n' + '    low = 0;\n' + '    high = n - 1;\n' + '    while (low <= high) {\n' + '        mid = (low + high)/2;\n' + '        if (X < V[mid])\n' + '            high = mid - 1;\n' + '        else if (X > V[mid])\n' + '            low = mid + 1;\n' + '\n' + '    }\n' + '    for(let i=0;i<10;i++){\n' + '         low = 12;\n' + '    }\n' + '    return -1;\n' + '}'),'function binarySearch(X, V, n){\n' + '    let low, high, mid;\n' + '    low = 0;\n' + '    high = n - 1;\n' + '    while (low <= high) {\n' + '        mid = (low + high)/2;\n' + '        if (X < V[mid])\n' + '            high = mid - 1;\n' + '        else if (X > V[mid])\n' + '            low = mid + 1;\n' + '\n' + '    }\n' + '    for(let i=0;i<10;i++){\n' + '         low = 12;\n' + '    }\n' + '    return -1;\n' + '}')),'[{line:Line,type:Type,name:Name,condition:Condition,value:Value},{line:1,type:Function Declaration,name:binarySearch,condition:,value:},{line:1,type:variable Declaration,name:X,condition:,value:},{line:1,type:variable Declaration,name:V,condition:,value:},{line:1,type:variable Declaration,name:n,condition:,value:},{line:2,type:variable Declaration,name:low,condition:,value:},{line:2,type:variable Declaration,name:high,condition:,value:},{line:2,type:variable Declaration,name:mid,condition:,value:},{line:3,type:assignment expression,name:low,condition:,value:0},{line:4,type:assignment expression,name:high,condition:,value:n-1},{line:5,type:while statement,name:,condition:low<=high,value:},{line:6,type:assignment expression,name:mid,condition:,value:low+high/2},{line:7,type:if statement,name:,condition:X<V[mid],value:},{line:8,type:assignment expression,name:high,condition:,value:mid-1},{line:9,type:else if statement,name:,condition:X>V[mid],value:},{line:10,type:assignment expression,name:low,condition:,value:mid+1},{line:10,type:variable Declaration,name:i,condition:,value:0},{line:13,type:for statement,name:,condition:i<10,value:},{line:13,type:update expression,name:i,condition:,value:i++},{line:14,type:assignment expression,name:low,condition:,value:12},{line:16,type:return statement,name:,condition:,value:-1}]'); });
    // var test='let x =15;\n' + 'let y =22;';
    /*  var test1='function binarySearch(X, V, n){\n' + '    let low, high, mid;\n' + '    low = 0;\n' + '    high = n - 1;\n' + '    while (low <= high) {\n' + '        mid = (low + high)/2;\n' + '        if (X < V[mid])\n' + '            high = mid - 1;\n' + '        else if (X > V[mid])\n' + '            low = mid + 1;\n' + '        else\n' + '            return mid;\n' + '    }\n' + '    return -1;\n' + '}';
   var test2='if (X < V[mid]){high = mid - 1;high =15;}else if (X > V[mid]){ low = mid + 1;h=25;}else{h=100;}';
    var test3=' if (X < V[5]){\n' + '            high = mid - 1;\n' + '}';
    var test4='for(let i =0;i<15;i++){\n' + 'let x =5;\n' + 'x++\n' + '}';
    var test5='if(x<10)\n' + 'x=15;\n' + 'else\n' + 'x=12;';
    var test6='if(x<v[m]){\n' + 'let t=14;\n' + '}\n' + 'else if (x>v[mm]){\n' + 'mm++;\n' + '}';
    */
});